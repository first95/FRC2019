import java.awt.Robot;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.RotatedRect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import edu.wpi.first.vision.VisionPipeline;

/**
* GripPipelineContoursFromTarget class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class GripPipelineContoursFromTarget implements VisionPipeline {

	//Outputs
	private Mat blurOutput = new Mat();
	private Mat hsvThresholdOutput = new Mat();
	private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
	private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
	private List<RotatedRect> rotatedBoxen = new LinkedList<>();
	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	@Override	public void process(Mat source0) {
		// Step Blur0:
		Mat blurInput = source0;
		BlurType blurType = BlurType.get("Box Blur");
		double blurRadius = 2.7027027027027026;
		blur(blurInput, blurType, blurRadius, blurOutput);

		// Step HSV_Threshold0:
		Mat hsvThresholdInput = blurOutput;
		double[] hsvThresholdHue = {45.69817278554671, 93.99989504410354};
		double[] hsvThresholdSaturation = {91.72661870503596, 255.0};
		double[] hsvThresholdValue = {57.32913669064751, 255.0};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Find_Contours0:
		Mat findContoursInput = hsvThresholdOutput;
		boolean findContoursExternalOnly = false;
		findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

		// Step Filter_Contours0:
		ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
		double filterContoursMinArea = 50.0;
		double filterContoursMinPerimeter = 0.0;
		double filterContoursMinWidth = 0.0;
		double filterContoursMaxWidth = 1000.0;
		double filterContoursMinHeight = 0.0;
		double filterContoursMaxHeight = 1000.0;
		double[] filterContoursSolidity = {90.28776978417267, 100.0};
		double filterContoursMaxVertices = 10000.0;
		double filterContoursMinVertices = 0.0;
		double filterContoursMinRatio = 0.0;
		double filterContoursMaxRatio = 1.0;
		filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);


		// Find rotated minimum-volume rectangles to fit all contours and filter on them
		rotatedBoxen = new LinkedList<>();
		double minAspectRatio  = 2.0;
		double maxAspectRatio  = 5.0;
		double minSolidity     = 0.75;
		double minArea         = 100.0;
		filterBoxen(findContoursOutput,  minAspectRatio, maxAspectRatio, minSolidity, minArea, rotatedBoxen);
	}

	/**
	 * This method is a generated getter for the output of a Blur.
	 * @return Mat output from Blur.
	 */
	public Mat blurOutput() {
		return blurOutput;
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Find_Contours.
	 * @return ArrayList<MatOfPoint> output from Find_Contours.
	 */
	public ArrayList<MatOfPoint> findContoursOutput() {
		return findContoursOutput;
	}

	/**
	 * This method is a generated getter for the output of a Filter_Contours.
	 * @return ArrayList<MatOfPoint> output from Filter_Contours.
	 */
	public ArrayList<MatOfPoint> filterContoursOutput() {
		return filterContoursOutput;
	}

	public List<RotatedRect> getFilteredBoxes() {
		return rotatedBoxen;
	}
	/**
	 * An indication of which type of filter to use for a blur.
	 * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
	 */
	enum BlurType{
		BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
			BILATERAL("Bilateral Filter");

		private final String label;

		BlurType(String label) {
			this.label = label;
		}

		public static BlurType get(String type) {
			if (BILATERAL.label.equals(type)) {
				return BILATERAL;
			}
			else if (GAUSSIAN.label.equals(type)) {
			return GAUSSIAN;
			}
			else if (MEDIAN.label.equals(type)) {
				return MEDIAN;
			}
			else {
				return BOX;
			}
		}

		@Override
		public String toString() {
			return this.label;
		}
	}

	/**
	 * Softens an image using one of several filters.
	 * @param input The image on which to perform the blur.
	 * @param type The blurType to perform.
	 * @param doubleRadius The radius for the blur.
	 * @param output The image in which to store the output.
	 */
	private void blur(Mat input, BlurType type, double doubleRadius,
		Mat output) {
		int radius = (int)(doubleRadius + 0.5);
		int kernelSize;
		switch(type){
			case BOX:
				kernelSize = 2 * radius + 1;
				Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
				break;
			case GAUSSIAN:
				kernelSize = 6 * radius + 1;
				Imgproc.GaussianBlur(input,output, new Size(kernelSize, kernelSize), radius);
				break;
			case MEDIAN:
				kernelSize = 2 * radius + 1;
				Imgproc.medianBlur(input, output, kernelSize);
				break;
			case BILATERAL:
				Imgproc.bilateralFilter(input, output, -1, radius, radius);
				break;
		}
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param output The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
	    Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
			new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Sets the values of pixels in a binary image to their distance to the nearest black pixel.
	 * @param input The image on which to perform the Distance Transform.
	 * @param type The Transform.
	 * @param maskSize the size of the mask.
	 * @param output The image in which to store the output.
	 */
	private void findContours(Mat input, boolean externalOnly,
		List<MatOfPoint> contours) {
		Mat hierarchy = new Mat();
		contours.clear();
		int mode;
		if (externalOnly) {
			mode = Imgproc.RETR_EXTERNAL;
		}
		else {
			mode = Imgproc.RETR_LIST;
		}
		int method = Imgproc.CHAIN_APPROX_SIMPLE;
		Imgproc.findContours(input, contours, hierarchy, mode, method);
	}


	/**
	 * Filters out contours that do not meet certain criteria.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param minWidth minimum width of a contour
	 * @param maxWidth maximum width
	 * @param minHeight minimum height
	 * @param maxHeight maximimum height
	 * @param Solidity the minimum and maximum solidity of a contour
	 * @param minVertexCount minimum vertex Count of the contours
	 * @param maxVertexCount maximum vertex Count
	 * @param minRatio minimum ratio of width to height
	 * @param maxRatio maximum ratio of width to height
	 */
	private void filterContours(List<MatOfPoint> inputContours, double minArea,
		double minPerimeter, double minWidth, double maxWidth, double minHeight, double
		maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
		minRatio, double maxRatio, List<MatOfPoint> output) {
		final MatOfInt hull = new MatOfInt();
		output.clear();
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < minWidth || bb.width > maxWidth) continue;
			if (bb.height < minHeight || bb.height > maxHeight) continue;
			final double area = Imgproc.contourArea(contour);
			if (area < minArea) continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
				int index = (int)hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
				mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) continue;
			if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
			final double ratio = bb.width / (double)bb.height;
			if (ratio < minRatio || ratio > maxRatio) continue;
			output.add(contour);
		}


	}

	/**
	 * 
	 * @param inputContours
	 * @param minAspectRatio minimum ratio of larger to smaller dimension - eg, a 1x3 rectangle has aspect ratio 3.
	 * @param maxAspectRatio maximum ratio of larger to smaller dimension - eg, a 1x3 rectangle has aspect ratio 3.
	 * @param minSolidity min fraction of the rectangle that is filled in by the contour
	 * @param minArea minimum area, in square pixels
	 * @param output
	 */
	private void filterBoxen(List<MatOfPoint> inputContours,
		double minAspectRatio, double maxAspectRatio, double minSolidity, double minArea, List<RotatedRect> output) {
		output.clear();
		for (MatOfPoint contour : inputContours) {
			final double contourArea = Imgproc.contourArea(contour);

			// Compute rectangle of tightest fit
			MatOfPoint2f  contours_2f = new MatOfPoint2f( contour.toArray() );
			RotatedRect rect = Imgproc.minAreaRect(contours_2f);

			// Big enough to be worked with?
			if(rect.size.area() < minArea) { continue; }

			// Aspect ratio within range?
			boolean heightIsLongAxis = rect.size.height > rect.size.width;
			double aspectRatio;
			if(heightIsLongAxis) {
				aspectRatio = rect.size.height / rect.size.width;
				System.out.println("height > width");
			} else {
				aspectRatio = rect.size.width / rect.size.height;
				System.out.println("height < width");
			}
			if(aspectRatio > maxAspectRatio || aspectRatio < minAspectRatio) { continue; }

			// Sufficiently filled in?
			final double cAreaToRArea = contourArea / rect.size.area();
			if(cAreaToRArea < minSolidity) { continue; }

			System.out.println("Accepting rectangle with angle: " + rect.angle);
			
			output.add(rect);
		}
	}

	public static void main(String[] args) {
		// System.out.println("Hello world!");
		// FileOutputStream fs;
		// try {
		// 	fs = new FileOutputStream("temp.txt");
		// 	fs.write("hello".getBytes());
		// 	fs.close();	
		// } catch (FileNotFoundException e) {
		// 	e.printStackTrace();
		// } catch (IOException e) {
		// 	e.printStackTrace();
		// }

		String[] filesToProcess = {
			// "test_images/Floor line/CargoAngledLine48in.jpg",
			// "test_images/Floor line/CargoLine16in.jpg                                               ",
			// "test_images/Floor line/CargoLine24in.jpg                                               ",
			// "test_images/Floor line/CargoLine36in.jpg                                               ",
			// "test_images/Floor line/CargoLine48in.jpg                                               ",
			// "test_images/Floor line/CargoLine60in.jpg                                               ",
			"test_images/Occluded, single target/LoadingAngle36in.jpg                               ",
			"test_images/Occluded, single target/LoadingAngleDark36in.jpg                           ",
			"test_images/Occluded, single target/LoadingAngleDark60in.jpg                           ",
			"test_images/Occluded, single target/LoadingAngleDark96in.jpg                           ",
			"test_images/Occluded, single target/LoadingStraightDark108in.jpg                       ",
			"test_images/Occluded, single target/LoadingStraightDark10in.jpg                        ",
			"test_images/Occluded, single target/LoadingStraightDark13in.jpg                        ",
			"test_images/Occluded, single target/LoadingStraightDark21in.jpg                        ",
			"test_images/Occluded, single target/LoadingStraightDark36in.jpg                        ",
			"test_images/Occluded, single target/LoadingStraightDark48in.jpg                        ",
			"test_images/Occluded, single target/LoadingStraightDark60in.jpg                        ",
			"test_images/Occluded, single target/LoadingStraightDark84in.jpg                        ",
			"test_images/Occluded, single target/LoadingStraightDark9in.jpg                         ",
			"test_images/Occluded, two targets/CargoSideStraightDark60in.jpg                        ",
			"test_images/Occluded, two targets/CargoSideStraightDark72in.jpg                        ",
			"test_images/Unoccluded, single target/From FRC/CargoSideStraightDark36in.jpg           ",
			"test_images/Unoccluded, single target/From FRC/CargoStraightDark19in.jpg               ",
			"test_images/Unoccluded, single target/From FRC/CargoStraightDark24in.jpg               ",
			"test_images/Unoccluded, single target/From FRC/RocketBallStraightDark19in.jpg          ",
			"test_images/Unoccluded, single target/From FRC/RocketBallStraightDark24in.jpg          ",
			"test_images/Unoccluded, single target/From FRC/RocketBallStraightDark29in.jpg          ",
			"test_images/Unoccluded, single target/From FRC/RocketBallStraightDark48in.jpg          ",
			"test_images/Unoccluded, single target/From FRC/RocketPanelStraightDark12in.jpg         ",
			"test_images/Unoccluded, single target/From FRC/RocketPanelStraightDark16in.jpg         ",
			"test_images/Unoccluded, single target/From FRC/RocketPanelStraightDark24in.jpg         ",
			"test_images/Unoccluded, single target/From FRC/RocketPanelStraightDark36in.jpg         ",
			"test_images/Unoccluded, single target/Taken in classroom/19 inches.png                 ",
			"test_images/Unoccluded, single target/Taken in classroom/29 inches.png                 ",
			"test_images/Unoccluded, single target/Taken in classroom/far.png                       ",
			"test_images/Unoccluded, single target/Taken in classroom/near.png                      ",
			"test_images/Unoccluded, two targets/CargoAngledDark48in.jpg                            ",
			"test_images/Unoccluded, two targets/CargoStraightDark72in.jpg                          ",
			"test_images/Unoccluded, two targets/CargoStraightDark90in.jpg                          ",
			"test_images/Unoccluded, two targets/RocketPanelAngleDark48in.jpg                       ",
			"test_images/Unoccluded, two targets/RocketPanelAngleDark60in.jpg                       ",
			"test_images/Unoccluded, two targets/RocketPanelAngleDark84in.jpg                       ",
		};

		Scalar unfilteredContoursColor = new Scalar(0,0,255);
		Scalar filteredContoursColor = new Scalar(255, 0, 0);
		Scalar filteredRectsColor = new Scalar(0, 255, 255);
		int lineWidth = 1;
	
		GripPipelineContoursFromTarget processor = new GripPipelineContoursFromTarget();
		for (String file : filesToProcess) {
			Mat img = Imgcodecs.imread(file);
			processor.process(img);
			Imgproc.drawContours(img, processor.findContoursOutput(), -1, unfilteredContoursColor);
			Imgproc.drawContours(img, processor.filterContoursOutput(), -1, filteredContoursColor);
			LinkedList<MatOfPoint> rotboxes = new LinkedList<>();
			for(RotatedRect rect : processor.getFilteredBoxes()) {
				Point[] vertices = new Point[4];
				rect.points(vertices);
				// MatOfPoint2f mop2f = new MatOfPoint2f(vertices);
				MatOfPoint mop = new MatOfPoint(vertices);
				rotboxes.add(mop);
				Integer angle = (int) rect.angle;
				Imgproc.putText(img, angle.toString(), rect.center, Core.FONT_HERSHEY_SIMPLEX, 0.5, new Scalar(255,255,255));
				Imgproc.putText(img, String.format("%.0fx%.0f", rect.size.width, rect.size.height), new Point(rect.center.x -20, rect.center.y + 50), Core.FONT_HERSHEY_SIMPLEX, 0.5, new Scalar(255,255,255));
			}
			Imgproc.drawContours(img, rotboxes, -1, filteredRectsColor);

			HighGui.imshow(file, img);
			// System.out.println(file + " has " + processor.filterLines0Output().size() + " left side lines: " + processor.filterLines0Output());
			// System.out.println(file + " has " + processor.filterLines1Output().size() + " right side lines: " + processor.filterLines1Output());
		}
		HighGui.waitKey(10);
	}

}

